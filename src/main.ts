import { app, BrowserWindow, ipcMain, session, shell } from 'electron';
import isDev from 'electron-is-dev';
import Store from 'electron-persist-secure/lib/store';
import fs from 'fs';
import path from 'path';

import { productName } from '../package.json';

const DEFAULT_NETWORK = 'algorand.mainnet';
const DEFAULT_PORT = 4160;

const NETWORKS = ['algorand.mainnet', 'voi.testnet'];

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

export type ModifiedBrowserWindow = BrowserWindow & {
  getNetwork: () => string;
  getPort: () => number;
  windowIndex?: number;
};

// Squirrel.Windows will spawn the app multiple times while installing/updating
// to make sure only one app is running, we quit if we detect squirrel
if (require('electron-squirrel-startup')) {
  const squirrelEvent = process.argv[1];
  if (squirrelEvent === '--squirrel-uninstall') {
    // delete the data directory
    const DATA_DIR = path.join(app.getPath('appData'), productName, 'data');
    if (fs.existsSync(DATA_DIR)) {
      fs.rmdirSync(DATA_DIR, { recursive: true });
    }
  }

  app.quit();
}

const firstInstance = app.requestSingleInstanceLock();
if (!firstInstance) {
  // only allow one instance of the app
  // we will handle multiple nodes as separate windows
  app.quit();
}

export let store: Store;
const createStore = () => {
  store = new Store({
    configName: 'config',
  });

  store.set('network', store.get('network', DEFAULT_NETWORK));
  store.set('nodeName', store.get('nodeName', ''));
  store.set('port', store.get('port', DEFAULT_PORT));
  store.set('startup', store.get('startup', false));
};

let windows: ModifiedBrowserWindow[] = [];
const createWindow = () => {
  const suffix =
    process.platform === 'darwin'
      ? 'icns'
      : process.platform === 'linux'
      ? 'png'
      : 'ico';
  const icon = `icon.${suffix}`;

  // Create the browser window.
  const window = new BrowserWindow({
    frame: false,
    height: 720,
    icon: app.isPackaged
      ? path.join(process.resourcesPath, icon)
      : path.join(__dirname, '..', '..', 'src', 'assets', 'icons', icon),
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    width: 1024,
  }) as ModifiedBrowserWindow;

  // and load the index.html of the app.
  window.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  if (isDev) {
    window.webContents.openDevTools({ mode: 'detach' });
  }

  // remove the menu
  window.removeMenu();
  window.setWindowButtonVisibility?.(false);

  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': [
          `connect-src 'self' data: http://localhost:* https://vp2apscqbf2e57yys6x4iczcyi0znuce.lambda-url.us-west-2.on.aws https://*.defly.app wss://*.walletconnect.org wss://*.defly.app; font-src 'self' https://fonts.gstatic.com; object-src 'none'; script-src 'self'; style-src 'unsafe-inline' https://fonts.googleapis.com`,
        ],
      },
    });
  });

  // this code is duplicated in the wizardStore rather than passing
  // these values back and forth with every IPC call
  window.getNetwork = () => {
    const network = store.get('network');
    if (window.windowIndex === 0) {
      return network as string;
    } else {
      // if we're not the main window, we need to use the other network
      return NETWORKS.find((n) => n !== network)!;
    }
  };
  window.getPort = () => (store.get('port') as number) + window.windowIndex!;

  // keep track of the windows in the order that they were opened
  // we send this index to the renderer so it knows if it's the main
  // window (index 0) or not
  windows.push(window);
  windows.forEach((win, index) => {
    win.windowIndex = index;
    win.webContents.send('window.index', {
      index,
    });
  });

  // when the window is closed, remove the reference to it
  window.on('closed', () => {
    windows = windows.filter((win) => win !== window);
    windows.forEach((win, index) => {
      win.windowIndex = index;
      win.webContents.send('window.index', {
        index,
      });
    });
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  createStore();
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// make sure all links open in the default browser
app.on('web-contents-created', (_, contents) => {
  contents.on('will-attach-webview', (event) => event.preventDefault());
  contents.on('will-navigate', (event) => event.preventDefault());
  contents.setWindowOpenHandler(({ url }) => {
    shell.openExternal(url);
    return { action: 'deny' };
  });
});

// IPC handlers
import './bridge/goal';

ipcMain.on('isDev', (event) => event.sender.send('isDev', null, isDev));

ipcMain.on('maximize', (event) => {
  BrowserWindow.fromWebContents(event.sender)?.maximize();
  event.sender.send('maximize');
});

ipcMain.on('maximized', (event) => {
  event.sender.send(
    'maximized',
    null,
    BrowserWindow.fromWebContents(event.sender)?.isMaximized(),
  );
});

ipcMain.on('minimize', (event) => {
  if (process.platform === 'darwin') {
    app.hide();
  } else {
    BrowserWindow.fromWebContents(event.sender)?.minimize();
  }

  event.sender.send('minimize');
});

ipcMain.on('newWindow', (event) => {
  createWindow();
  event.sender.send('newWindow');
});

ipcMain.on('platform', (event) => {
  event.sender.send('platform', null, process.platform);
});

ipcMain.on('refresh', (event) => {
  createWindow();
  BrowserWindow.fromWebContents(event.sender)?.close();
});

ipcMain.on('quit', (event) => {
  BrowserWindow.fromWebContents(event.sender)?.close();
});

ipcMain.on('setStartup', (event, { startup }) => {
  const appFolder = path.dirname(process.execPath);
  const updateExe = path.resolve(appFolder, '..', 'Update.exe');
  const exeName = path.basename(process.execPath);

  app.setLoginItemSettings({
    args: ['--processStart', `"${exeName}"`],
    openAtLogin: startup,
    path: updateExe,
  });

  store.set('startup', startup);
  event.sender.send('setStartup');
});

ipcMain.on('unmaximize', (event) => {
  BrowserWindow.fromWebContents(event.sender)?.unmaximize();
  event.sender.send('unmaximize');
});
